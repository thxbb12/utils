#!/bin/bash

# QEMU system to use.
QEMU=qemu-system-x86_64

# Number of CPUs to use
CPUS=4

# Amount of RAM to use
RAM=4G

# Specify a UEFI firmware
# On Ubuntu 24.04 make sure to install the "ovmf" package
#BIOS="-bios /usr/share/ovmf/OVMF.fd"

# Paravirtualized display driver
DISP="-vga virtio"
#DISP="-device virtio-gpu-gl-pci -display sdl,gl=on"

# Provide the VM with a network interface and NAT Internet access.
# The argument "-nic none" tells QEMU to not use a network interface.
# Furthermore, we redirect port 4000 on localhost interface to 22 in the VM.
NETWORK="-nic user,model=virtio,hostfwd=tcp:127.0.0.1:4000-:22"

#AUDIO="-audiodev pa,id=myaudio,out.mixing-engine=off -device ac97,audiodev=myaudio"
#AUDIO="-audiodev pa,id=myaudio,out.mixing-engine=off -device qemu-xhci -device usb-audio,audiodev=myaudio"
AUDIO="-audiodev pa,id=myaudio,out.mixing-engine=off -device intel-hda -device hda-output,audiodev=myaudio"

# Paravirtualized mouse: not supported well in most guest OSes, hence commented out
#MOUSE="-device virtio-mouse"

# Enable QEMU Guest Agent to communicate with Guest OS
QGA="-device virtio-serial -device virtserialport,chardev=qga0,name=org.qemu.guest_agent.0 -chardev socket,path=/tmp/qga.sock,server=on,wait=off,id=qga0"

# Provide shared clipboard through spice guest agent
# Must be disabled if -spice is enabled (otherwise redundant device)
SHARED_CLIPBOARD="-chardev qemu-vdagent,id=ch1,name=vdagent,clipboard=on -device virtio-serial-pci -device virtserialport,chardev=ch1,id=ch1,name=com.redhat.spice.0"

# Give the VM direct access to /dev/ttyS0
#SERIAL_PASSTHROUGH="-chardev serial,path=/dev/ttyS0,id=myserial -device pci-serial,chardev=myserial"

# QEMU minimum major version required.
MAJOR_VERSION_REQUIRED=3

APP=`basename $0`

function echoerr {
    echo "$@" >&2
}

function usage {
	echoerr "$APP - launch a VM on the specified disk image(s)."
	echoerr "The VM is configured with $CPUS CPUs and $RAM of RAM."
    echoerr ""
    echoerr "Usage: $APP [-bios] [-spice] [-snapshot] -d disk -i iso"
    echoerr ""
    echoerr "-bios        use BIOS as firmware instead of UEFI"
    echoerr "-spice       run a Spice server for remote access (VDI)"
    echoerr "-snapshot    temporary VM: changes to disk will be discarded upon exit"
    echoerr "disk         the disk image to use (typically a .qcow file)"
    echoerr "iso          the CD/DVD-ROM image to use (typically an .iso file)"
    echoerr ""
    echoerr "Argument between [] are optional."
    echoerr "Either -d or -i (or both) must be specified."
    exit 1
}

function check_qemu_version {
    qemu_version=`$QEMU -version 2>/dev/null`
    if [ $? -ne 0 ]; then
        echoerr "$QEMU is required but not found."
        echoerr "On Ubuntu/Debian, it can be installed with \"sudo apt-get install qemu-system-x86\"."
        exit 1
    fi

    full_version=`$QEMU -version|grep ^QEMU|awk -F" " '{print $4}'`
    major_version=`echo $full_version|awk -F"." '{print $1}'`
    if [ $major_version -lt $MAJOR_VERSION_REQUIRED ]; then
        echoerr "$QEMU version $MAJOR_VERSION_REQUIRED.0.0 or newer is required."
        echoerr "Found version $full_version which is not recent enough."
        echoerr "Aborted."
        exit 1
    fi
}

if [ $# -lt 1 ]; then
    usage
fi

check_qemu_version

while [[ $# -gt 0 ]]; do
  case $1 in
    -d)
      disk="$2"
      shift 2
      ;;
    -i)
      iso="$2"
      shift 2
      ;;
    -bios)
     BIOS=""
     shift 1
     ;;
    -spice)
      # Embed a passwordless Spice server on port 8000 for remote access (VDI)
      SPICE="-device virtio-serial-pci -spice port=8000,disable-ticketing=on -device virtserialport,chardev=spicechannel0,name=com.redhat.spice.0 -chardev spicevmc,id=spicechannel0,name=vdagent"
      # Disable shared clipboard as it conflicts with the arguments above
      SHARED_CLIPBOARD=""
      shift 1
      ;;
    -snapshot)
     SNAPSHOT=-snapshot
     shift 1
     ;;
   *)
      echo "Unknown argument $1"
      exit 1
      ;;
  esac
done

if [ ! -z $disk ]; then
    disk_drive="-drive file=$disk,index=0,media=disk,format=qcow2,discard=unmap,detect-zeroes=unmap,if=virtio"
fi

if [ ! -z $iso ]; then
    cdrom_drive="-drive file=$iso,index=1,media=cdrom,format=raw,read-only=on"
fi

# -boot order=d tells QEMU to boot to CDROM first
qemu-system-x86_64 -machine accel=kvm $BIOS -smp cpus=$CPUS -m $RAM -boot order=d $DISP $disk_drive $cdrom_drive $NETWORK $AUDIO $QGA $MOUSE $SPICE $SHARED_CLIPBOARD $SNAPSHOT
